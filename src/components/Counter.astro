---
// Counter.astro - Real-time counter component displaying elapsed time since October 8, 2023
import { calculateElapsedTime, formatTimeUnit } from '../utils/timeCalculations';
import { START_TIMESTAMP, COUNTER_UPDATE_INTERVAL } from '../utils/constants';
import type { TimeElapsed } from '../types';

// Server-side calculation for initial render
const currentTimestamp = Math.floor(Date.now() / 1000);
const initialElapsedTime = calculateElapsedTime(START_TIMESTAMP, currentTimestamp);
---

<div class="counter-container" role="main" aria-label="Palestine Solidarity Counter">
  <!-- Screen reader announcement for counter purpose -->
  <div class="sr-only" aria-live="polite" id="counter-description">
    Real-time counter showing elapsed time since October 8, 2023, when Israel declared war on Gaza
  </div>

  <!-- Main counter display -->
  <div class="counter-display" aria-describedby="counter-description">
    <!-- Time units grid -->
    <div class="time-grid" role="timer" aria-live="polite" aria-atomic="true" aria-label="Elapsed time counter">
      <div class="time-unit" data-unit="years">
        <span class="time-value" id="years-value">{initialElapsedTime.years}</span>
        <span class="time-label" aria-label={`${initialElapsedTime.years} years`}>
          {initialElapsedTime.years === 1 ? 'Year' : 'Years'}
        </span>
      </div>

      <div class="time-unit" data-unit="months">
        <span class="time-value" id="months-value">{initialElapsedTime.months}</span>
        <span class="time-label" aria-label={`${initialElapsedTime.months} months`}>
          {initialElapsedTime.months === 1 ? 'Month' : 'Months'}
        </span>
      </div>

      <div class="time-unit" data-unit="days">
        <span class="time-value" id="days-value">{initialElapsedTime.days}</span>
        <span class="time-label" aria-label={`${initialElapsedTime.days} days`}>
          {initialElapsedTime.days === 1 ? 'Day' : 'Days'}
        </span>
      </div>

      <div class="time-unit" data-unit="hours">
        <span class="time-value" id="hours-value">{initialElapsedTime.hours}</span>
        <span class="time-label" aria-label={`${initialElapsedTime.hours} hours`}>
          {initialElapsedTime.hours === 1 ? 'Hour' : 'Hours'}
        </span>
      </div>

      <div class="time-unit" data-unit="minutes">
        <span class="time-value" id="minutes-value">{initialElapsedTime.minutes}</span>
        <span class="time-label" aria-label={`${initialElapsedTime.minutes} minutes`}>
          {initialElapsedTime.minutes === 1 ? 'Minute' : 'Minutes'}
        </span>
      </div>

      <div class="time-unit" data-unit="seconds">
        <span class="time-value" id="seconds-value">{initialElapsedTime.seconds}</span>
        <span class="time-label" aria-label={`${initialElapsedTime.seconds} seconds`}>
          {initialElapsedTime.seconds === 1 ? 'Second' : 'Seconds'}
        </span>
      </div>
    </div>

    <!-- Alternative format for screen readers -->
    <div class="sr-only" aria-live="polite" id="counter-alt-format">
      Total elapsed time: {initialElapsedTime.totalDays} days, {initialElapsedTime.totalHours} hours
    </div>
  </div>
</div>

<style>
  .counter-container {
    @apply w-full max-w-6xl mx-auto px-4 py-8;
  }

  .counter-display {
    @apply text-center;
  }

  .time-grid {
    @apply grid gap-4 md:gap-6 lg:gap-8;
    /* Responsive grid layout */
    grid-template-columns: repeat(2, 1fr); /* Mobile: 2 columns */
  }

  @media (min-width: 640px) {
    .time-grid {
      grid-template-columns: repeat(3, 1fr); /* Tablet: 3 columns */
    }
  }

  @media (min-width: 1024px) {
    .time-grid {
      grid-template-columns: repeat(6, 1fr); /* Desktop: 6 columns */
    }
  }

  .time-unit {
    @apply flex flex-col items-center justify-center p-4 md:p-6;
    @apply bg-white border-2 border-gray-200 rounded-lg shadow-sm;
    @apply transition-all duration-300 ease-in-out;
    @apply hover:shadow-md hover:border-red-300;
    min-height: 120px;
  }

  .time-value {
    @apply text-3xl md:text-4xl lg:text-5xl font-bold;
    @apply text-red-600; /* Palestine flag red */
    @apply leading-none mb-2;
    @apply tabular-nums; /* Monospace numbers for consistent width */
    font-feature-settings: 'tnum' 1; /* Enable tabular numbers */
  }

  .time-label {
    @apply text-sm md:text-base lg:text-lg;
    @apply text-gray-700 font-medium uppercase tracking-wide;
    @apply leading-tight;
  }

  /* Screen reader only content */
  .sr-only {
    @apply absolute w-px h-px p-0 -m-px overflow-hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
  }

  /* Focus styles for accessibility */
  .time-unit:focus-within {
    @apply outline-none ring-2 ring-red-500 ring-offset-2;
  }

  /* Animation for value changes */
  .time-value {
    transition: color 0.2s ease-in-out;
  }

  .time-value.updating {
    @apply text-green-600; /* Palestine flag green during update */
  }

  /* High contrast mode support */
  @media (prefers-contrast: high) {
    .time-unit {
      @apply border-black border-4;
    }
    
    .time-value {
      @apply text-black;
    }
    
    .time-label {
      @apply text-black;
    }
  }

  /* Reduced motion support */
  @media (prefers-reduced-motion: reduce) {
    .time-unit,
    .time-value {
      transition: none;
    }
  }

  /* Dark mode support */
  @media (prefers-color-scheme: dark) {
    .time-unit {
      @apply bg-gray-800 border-gray-600;
    }
    
    .time-label {
      @apply text-gray-300;
    }
  }
</style>

<script>
  // Client-side TypeScript for real-time updates
  import { calculateElapsedTime } from '../utils/timeCalculations';
  import { START_TIMESTAMP, COUNTER_UPDATE_INTERVAL } from '../utils/constants';
  import type { TimeElapsed } from '../types';

  class CounterManager {
    private intervalId: number | null = null;
    private isActive: boolean = false;
    private elements: {
      years: HTMLElement | null;
      months: HTMLElement | null;
      days: HTMLElement | null;
      hours: HTMLElement | null;
      minutes: HTMLElement | null;
      seconds: HTMLElement | null;
      altFormat: HTMLElement | null;
    };

    constructor() {
      this.elements = {
        years: document.getElementById('years-value'),
        months: document.getElementById('months-value'),
        days: document.getElementById('days-value'),
        hours: document.getElementById('hours-value'),
        minutes: document.getElementById('minutes-value'),
        seconds: document.getElementById('seconds-value'),
        altFormat: document.getElementById('counter-alt-format')
      };

      this.init();
    }

    private init(): void {
      // Start the counter when the page loads
      this.start();

      // Handle page visibility changes to pause/resume counter
      document.addEventListener('visibilitychange', () => {
        if (document.hidden) {
          this.pause();
        } else {
          this.resume();
        }
      });

      // Clean up on page unload
      window.addEventListener('beforeunload', () => {
        this.stop();
      });
    }

    private updateDisplay(elapsedTime: TimeElapsed): void {
      // Update time values with animation
      this.updateTimeUnit('years', elapsedTime.years);
      this.updateTimeUnit('months', elapsedTime.months);
      this.updateTimeUnit('days', elapsedTime.days);
      this.updateTimeUnit('hours', elapsedTime.hours);
      this.updateTimeUnit('minutes', elapsedTime.minutes);
      this.updateTimeUnit('seconds', elapsedTime.seconds);

      // Update alternative format for screen readers
      if (this.elements.altFormat) {
        this.elements.altFormat.textContent = 
          `Total elapsed time: ${elapsedTime.totalDays} days, ${elapsedTime.totalHours} hours`;
      }

      // Update aria-labels for better accessibility
      this.updateAriaLabels(elapsedTime);
    }

    private updateTimeUnit(unit: keyof typeof this.elements, value: number): void {
      const element = this.elements[unit];
      if (!element) return;

      const currentValue = parseInt(element.textContent || '0');
      
      if (currentValue !== value) {
        // Add updating class for animation
        element.classList.add('updating');
        
        // Update the value
        element.textContent = value.toString();
        
        // Remove animation class after a short delay
        setTimeout(() => {
          element.classList.remove('updating');
        }, 200);
      }
    }

    private updateAriaLabels(elapsedTime: TimeElapsed): void {
      const units = ['years', 'months', 'days', 'hours', 'minutes', 'seconds'] as const;
      
      units.forEach(unit => {
        const element = this.elements[unit];
        if (element) {
          const value = elapsedTime[unit];
          const label = element.nextElementSibling as HTMLElement;
          if (label) {
            label.setAttribute('aria-label', `${value} ${unit}`);
          }
        }
      });
    }

    private calculateCurrentElapsedTime(): TimeElapsed {
      const currentTimestamp = Math.floor(Date.now() / 1000);
      return calculateElapsedTime(START_TIMESTAMP, currentTimestamp);
    }

    private tick(): void {
      try {
        const elapsedTime = this.calculateCurrentElapsedTime();
        this.updateDisplay(elapsedTime);
      } catch (error) {
        console.error('Counter update error:', error);
        // Continue running even if there's an error
      }
    }

    public start(): void {
      if (this.isActive) return;

      this.isActive = true;
      
      // Update immediately
      this.tick();
      
      // Set up interval for regular updates
      this.intervalId = window.setInterval(() => {
        this.tick();
      }, COUNTER_UPDATE_INTERVAL);
    }

    public pause(): void {
      if (this.intervalId) {
        clearInterval(this.intervalId);
        this.intervalId = null;
      }
      this.isActive = false;
    }

    public resume(): void {
      if (!this.isActive) {
        this.start();
      }
    }

    public stop(): void {
      this.pause();
    }
  }

  // Initialize counter when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      new CounterManager();
    });
  } else {
    new CounterManager();
  }
</script>